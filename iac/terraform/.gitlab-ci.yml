
cache:
  key: ${CI_PROJECT_DIR}-terraform
  paths:
    - .terraform

variables:
  tf_image: 075050162388.dkr.ecr.eu-central-1.amazonaws.com/sennder/platform/aws:2.5.0

.lib.terraform:changes:shared: &lib_terraform_changes_shared
  changes:
    - iac/terraform/shared/**/*
    - iac/terraform/environments/shared/*
    - iac/terraform/.gitlab-ci.yml

.lib.terraform:changes:app: &lib_terraform_changes_app
  changes:
    - iac/terraform/app/**/*
    - iac/terraform/environments/playground/*
    - iac/terraform/environments/dev/*
    - iac/terraform/environments/prod/*
    - iac/terraform/environments/uat/*
    - iac/terraform/.gitlab-ci.yml

.lib:terraform:rules:shared: &lib_terraform_rules_shared
  rules:
    # - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    #   <<: *lib_terraform_changes_shared
    #   when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *lib_terraform_changes_shared
      when: on_success

.lib:terraform:rules:app: &lib_terraform_rules_app
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_JOB_STAGE != 'tf_apply'
      <<: *lib_terraform_changes_app
      when: on_success
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && $CI_JOB_STAGE == 'tf_apply' && $CI_ENVIRONMENT_NAME == 'dev'
      when: manual
      allow_failure: true # make the job optional for a pipeline to succeed and the next stages to run
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      <<: *lib_terraform_changes_app
      when: on_success

tf_shared:
  stage: tf_shared
  image: ${tf_image}
  environment:
    name: shared
  variables:
    PLAN: shared.plan.tfplan
    PLAN_JSON: shared.tfplan.json
    TF_ROOT: ${CI_PROJECT_DIR}/iac/terraform/shared
    TF_VAR_git_last_commit_author: ${GITLAB_USER_EMAIL}
    TF_VAR_git_last_commit_short_sha: ${CI_COMMIT_SHORT_SHA}
    TF_VAR_git_repository: ${CI_PROJECT_URL}
    TF_VAR_project_id: ${CI_PROJECT_ID}
  interruptible: false
  before_script:
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - cd ${TF_ROOT}
    - tfswitch
    - cat ~/.aws/config
    - source ../../scripts/terraform-init.sh
  script:
    - terraform validate
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - terraform plan -input=false -out=$PLAN
    - terraform show --json $PLAN | convert_report > $PLAN_JSON
    - echo "applying terraform"
    - terraform apply -input=false ${PLAN}
  <<: *lib_terraform_rules_shared
  tags:
    - small-runners-nw

.prepare_tf:
  image: ${tf_image}
  variables:
    PLAN: ${CI_ENVIRONMENT_NAME}.plan.tfplan
    PLAN_JSON: ${CI_ENVIRONMENT_NAME}.tfplan.json
    TF_VARS: ${CI_ENVIRONMENT_NAME}.tfvars
    TF_ROOT: ${CI_PROJECT_DIR}/iac/terraform/app
    AWS_PROFILE: $CI_ENVIRONMENT_NAME
    TF_VAR_git_last_commit_author: ${GITLAB_USER_EMAIL}
    TF_VAR_git_last_commit_short_sha: ${CI_COMMIT_SHORT_SHA}
    TF_VAR_git_repository: ${CI_PROJECT_URL}
    TF_VAR_project_id: ${CI_PROJECT_ID}
  before_script:
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - cd ${TF_ROOT}
    - tfswitch
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    - source ../../scripts/terraform-init.sh || true
  tags:
    - small-runners-nw
  <<: *lib_terraform_rules_app

.plan: &plan
  extends: .prepare_tf
  stage: tf_plan
  script:
    - terraform validate
    - terraform plan -out=$PLAN -input=false -var-file=../environments/${CI_ENVIRONMENT_NAME}/variables.tfvars
    - terraform show --json $PLAN | convert_report > $PLAN_JSON
  artifacts:
    name: $CI_ENVIRONMENT_NAME
    paths:
      - ${TF_ROOT}/${PLAN}
    reports:
      terraform: ${TF_ROOT}/${PLAN_JSON}

.apply: &apply
  extends: .prepare_tf
  stage: tf_apply
  interruptible: false
  script:
    - terraform apply -input=false ${PLAN}



tf_destroy:playground:
  extends: .prepare_tf
  stage: destroy_app
  interruptible: false
  environment:
    name: playground
  script:
    - terraform destroy -auto-approve -input=false -var-file=../environments/${CI_ENVIRONMENT_NAME}/variables.tfvars
  rules:
    - when: manual

tf_destroy_shared:
  stage: destroy_app
  image: ${tf_image}
  environment:
    name: shared
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/iac/terraform/shared
    TF_VAR_git_last_commit_author: ${GITLAB_USER_EMAIL}
    TF_VAR_git_last_commit_short_sha: ${CI_COMMIT_SHORT_SHA}
    TF_VAR_git_repository: ${CI_PROJECT_URL}
    TF_VAR_project_id: ${CI_PROJECT_ID}
  interruptible: false
  before_script:
    - unset AWS_ACCESS_KEY_ID
    - unset AWS_SECRET_ACCESS_KEY
    - cd ${TF_ROOT}
    - cat ~/.aws/config
    - source ../../scripts/terraform-init.sh
  script:
    - terraform destroy -auto-approve -input=false
  rules:
    - when: manual
  tags:
    - small-runners-nw

tf_plan:playground:
  <<: *plan
  environment:
    name: playground

tf_apply:playground:
  <<: *apply
  environment:
    name: playground
  needs: ["tf_plan:playground"]


